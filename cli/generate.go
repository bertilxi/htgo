package cli

import (
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/bertilxi/htgo/loaderutil"
)

// GenerateLoaders creates the loader registry in the pages directory
func GenerateLoaders(pagesDir string) error {
	if pagesDir == "" {
		pagesDir = "pages"
	}

	// Check if directory exists
	info, err := os.Stat(pagesDir)
	if err != nil || !info.IsDir() {
		// Silently skip if pages directory doesn't exist
		return nil
	}

	fmt.Printf("📝 Generating loader registry...\n")

	// Discover loaders
	loaders, err := loaderutil.DiscoverLoaders(pagesDir)
	if err != nil {
		fmt.Printf("⚠️  Warning: failed to discover loaders: %v\n", err)
		return nil
	}

	if len(loaders) == 0 {
		// No loaders found, but that's okay
		return nil
	}

	// Sort loaders by route for consistent output
	sort.Slice(loaders, func(i, j int) bool {
		return loaders[i].Route < loaders[j].Route
	})

	// Generate code
	code := generateLoaderRegistry(pagesDir, loaders)

	// Write to file
	outputFile := filepath.Join(pagesDir, "loaders_generated.go")
	err = os.WriteFile(outputFile, []byte(code), 0644)
	if err != nil {
		fmt.Printf("⚠️  Warning: failed to write %s: %v\n", outputFile, err)
		return nil
	}

	fmt.Printf("✓ Generated %s with %d loaders\n", outputFile, len(loaders))
	return nil
}

func generateLoaderRegistry(pagesDir string, loaders []loaderutil.LoaderInfo) string {
	// Get package name from directory
	pkgName := filepath.Base(pagesDir)

	var sb strings.Builder

	// Header with go:generate comment
	sb.WriteString(fmt.Sprintf(`// Code generated by htgo. DO NOT EDIT.
// Generated for loaders in %s/

package %s

import (
	"github.com/gin-gonic/gin"
)

// LoaderRegistry maps routes to their corresponding loader functions.
// This is auto-generated from .go files colocated with pages.
var LoaderRegistry = map[string]func(c *gin.Context) (any, error){
`, pagesDir, pkgName))

	// Add each loader
	for _, loader := range loaders {
		sb.WriteString(fmt.Sprintf(`	"%s": %s,
`, loader.Route, loader.FunctionName))
	}

	sb.WriteString(`}
`)

	return sb.String()
}

// ensureGeneratedLoaders checks if loaders_generated.go exists, if not generates it
func ensureGeneratedLoaders(pagesDir string) error {
	if pagesDir == "" {
		pagesDir = "pages"
	}

	generatedFile := filepath.Join(pagesDir, "loaders_generated.go")

	// Check if file exists
	_, err := os.Stat(generatedFile)
	if err == nil {
		// File exists, we're good
		return nil
	}

	// File doesn't exist, generate it
	return GenerateLoaders(pagesDir)
}
