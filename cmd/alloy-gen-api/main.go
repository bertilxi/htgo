// alloy-gen-api generates an API handler registry from colocated .go files
// Usage: alloy-gen-api [apiDir]
package main

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/bertilxi/alloy/apiutil"
)

func main() {
	flag.Parse()

	// Get API directory from first arg or default to "api"
	apiDir := "api"
	if flag.NArg() > 0 {
		apiDir = flag.Arg(0)
	}

	// Discover API handlers
	handlers, err := apiutil.DiscoverAPIHandlers(apiDir)
	if err != nil {
		fmt.Fprintf(os.Stderr, "error: %v\n", err)
		os.Exit(1)
	}

	// If no handlers found and api directory doesn't exist, that's ok - exit cleanly
	if len(handlers) == 0 {
		// Try to check if directory exists
		if _, err := os.Stat(apiDir); os.IsNotExist(err) {
			fmt.Printf("ℹ API directory %s does not exist, skipping generation\n", apiDir)
			return
		}
	}

	// Sort handlers by route for consistent output
	sort.Slice(handlers, func(i, j int) bool {
		return handlers[i].Route < handlers[j].Route
	})

	// Generate code
	code := generateRegistry(apiDir, handlers)

	// Write to file
	outputFile := filepath.Join(apiDir, "api_generated.go")
	err = os.WriteFile(outputFile, []byte(code), 0644)
	if err != nil {
		fmt.Fprintf(os.Stderr, "error writing %s: %v\n", outputFile, err)
		os.Exit(1)
	}

	fmt.Printf("✓ Generated %s with %d handlers\n", outputFile, len(handlers))
}

func generateRegistry(apiDir string, handlers []apiutil.APIInfo) string {
	// Get package name from directory
	pkgName := filepath.Base(apiDir)

	var sb strings.Builder

	// Header with go:generate comment
	sb.WriteString(fmt.Sprintf(`// Code generated by alloy-gen-api. DO NOT EDIT.
// Generated for API handlers in %s/

package %s

import (
	"github.com/gin-gonic/gin"
)

// APIHandlerRegistry maps routes to their corresponding handler functions.
// This is auto-generated from .go files in the api directory.
var APIHandlerRegistry = map[string]func(c *gin.Context){
`, apiDir, pkgName))

	// Add each handler
	for _, handler := range handlers {
		sb.WriteString(fmt.Sprintf(`	"%s": %s,
`, handler.Route, handler.FunctionName))
	}

	sb.WriteString(`}
`)

	return sb.String()
}
