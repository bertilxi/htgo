// htgo-gen-loaders generates a loader registry from colocated .go files
// Usage: htgo-gen-loaders [pagesDir]
package main

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/bertilxi/htgo/loaderutil"
)

func main() {
	flag.Parse()

	// Get pages directory from first arg or default to "pages"
	pagesDir := "pages"
	if flag.NArg() > 0 {
		pagesDir = flag.Arg(0)
	}

	// Discover loaders
	loaders, err := loaderutil.DiscoverLoaders(pagesDir)
	if err != nil {
		fmt.Fprintf(os.Stderr, "error: %v\n", err)
		os.Exit(1)
	}

	// Sort loaders by route for consistent output
	sort.Slice(loaders, func(i, j int) bool {
		return loaders[i].Route < loaders[j].Route
	})

	// Generate code
	code := generateRegistry(pagesDir, loaders)

	// Write to file
	outputFile := filepath.Join(pagesDir, "loaders_generated.go")
	err = os.WriteFile(outputFile, []byte(code), 0644)
	if err != nil {
		fmt.Fprintf(os.Stderr, "error writing %s: %v\n", outputFile, err)
		os.Exit(1)
	}

	fmt.Printf("âœ“ Generated %s with %d loaders\n", outputFile, len(loaders))
}

func generateRegistry(pagesDir string, loaders []loaderutil.LoaderInfo) string {
	// Get package name from directory
	pkgName := filepath.Base(pagesDir)

	var sb strings.Builder

	// Header with go:generate comment
	sb.WriteString(fmt.Sprintf(`// Code generated by htgo-gen-loaders. DO NOT EDIT.
// Generated for loaders in %s/

package %s

import (
	"github.com/gin-gonic/gin"
)

// LoaderRegistry maps routes to their corresponding loader functions.
// This is auto-generated from .go files colocated with pages.
var LoaderRegistry = map[string]func(c *gin.Context) (any, error){
`, pagesDir, pkgName))

	// Add each loader
	for _, loader := range loaders {
		sb.WriteString(fmt.Sprintf(`	"%s": %s,
`, loader.Route, loader.FunctionName))
	}

	sb.WriteString(`}
`)

	return sb.String()
}
